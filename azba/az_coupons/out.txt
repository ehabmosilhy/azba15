Directory Structure:
├── models
│   ├── coupon_coupon.py
│   ├── coupon_coupon_paper.py
│   ├── pos_order.py
│   ├── product_template.py
│   ├── __init__.py
│   └── __pycache__
│       ├── coupon_coupon.cpython-38.pyc
│       ├── coupon_coupon_paper.cpython-38.pyc
│       ├── pos_order.cpython-38.pyc
│       ├── product_template.cpython-38.pyc
│       └── __init__.cpython-38.pyc
├── out.txt
├── security
│   └── ir.model.access.csv
├── static
│   ├── description
│   │   └── icon.png
│   └── src
│       └── js
│           └── pos_coupon.js
├── views
│   ├── coupon_coupon.xml
│   └── product_template.xml
├── __init__.py
├── __manifest__.py
└── __pycache__
    └── __init__.cpython-38.pyc


===== .\out.txt =====

===== .\__init__.py =====
# -*- coding: utf-8 -*-
from . import models
===== .\__manifest__.py =====
{
    "name": "AZ - Coupons",
    "version": "15.0.1.0",
    "license": "LGPL-3",
    "category": "Sales",
    "depends": ["point_of_sale", "pos_coupon"],
    "data": [
        'views/coupon_coupon.xml',
        'views/product_template.xml',
        'security/ir.model.access.csv',
    ],
    "installable": True,
    "auto_install": False,
}
===== .\models\coupon_coupon.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class Coupon(models.Model):
    _name = 'az.coupon'

    name = fields.Char(string='Name', required=True)
    page_count = fields.Integer(string='Page Count', required=True)

    code = fields.Char(string='Code')
    paper_ids = fields.One2many('az.coupon.paper', 'coupon_book_id', string='Papers')
    pos_order_id = fields.Many2one('pos.order', string='POS Order')
    partner_id = fields.Many2one(related='pos_order_id.partner_id', string='Partner')
    product_id = fields.Many2one(related='pos_order_id.lines.product_id', string='Product')

    available_count = fields.Integer(compute='_compute_available_count', string='Available')
    used_count = fields.Integer(compute='_compute_available_count', string='Used')

    @api.depends('paper_ids')
    def _compute_available_count(self):
        # get the count of papers where state = 'valid'
        for coupon in self:
            coupon.available_count = self.env['az.coupon.paper'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'valid')]
            )
            coupon.used_count = self.env['az.coupon.paper'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'used')]
            )


    state = fields.Selection([
        ('valid', 'Valid'),
        ('sent', 'Sent'),
        ('used', 'Used'),
        ('cancel', 'Cancelled')
    ], required=True, default='valid')

    @api.model
    def _default_session(self):
        return self.env['pos.session'].search([], limit=1)

    session_id = fields.Many2one('pos.session', string='Session', default=_default_session)
    @api.model
    def _generate_code(self):
        """Generate a code in the format YYMMSSS where:
        - YY: Last two digits of the year
        - MM: Two-digit month
        - SSS: A 3-digit serial number incremented from the last coupon.
        """
        current_year = datetime.now().year % 100  # Last two digits of the year
        current_month = datetime.now().month  # Two-digit month

        # Find the last generated code
        last_coupon = self.search([], order='id desc', limit=1)

        if last_coupon and last_coupon.code:
            last_serial = int(last_coupon.code[-3:])  # Extract the last 3 digits as serial number
            new_serial = last_serial + 1
        else:
            new_serial = 1  # Start with 001 if no previous coupon exists

        # Format the components into a string
        code = f"{current_year:02d}{current_month:02d}{new_serial:03d}"

        return code

    @api.model
    def create(self, vals):
        vals['code'] = self._generate_code()
        new_coupon = super(Coupon, self).create(vals)

        page_count = vals.get('page_count')
        # Generate 20 az.coupon.paper records
        paper_vals_list = [{
            'code': f"{new_coupon.code}-{i:03d}",
            'coupon_book_id': new_coupon.id
        } for i in range(1, page_count + 1)]

        self.env['az.coupon.paper'].create(paper_vals_list)

        return new_coupon

===== .\models\coupon_coupon_paper.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models

class CouponPaper(models.Model):
    _name = 'az.coupon.paper'
    _description = "Coupon Paper"
    _rec_name = 'code'

    coupon_book_id = fields.Many2one('az.coupon', string='Coupon Book', ondelete='cascade')
    code = fields.Char(required=True, readonly=True)
    state = fields.Selection([
        ('valid', 'Valid'),
        ('sent', 'Sent'),
        ('used', 'Used'),
        ('cancel', 'Cancelled')
    ], required=True, default='valid')
===== .\models\pos_order.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class PosOrder(models.Model):
    _inherit = "pos.order"

    # 📜 Function to create a coupon based on the order lines
    def create_coupon(self, order, values):
        # 🎨 Loop through each line in the order
        for line in values['lines']:
            product = line[2]
            # 🧐 Check if the product name contains 'book' or 'دفتر'
            if 'book' in product['full_product_name'].lower() or 'دفتر' in product['full_product_name'].lower():
                product_id = self.env['product.product'].browse(product['product_id'])
                coupon_paper_count = product_id.coupon_paper_count
                # 🔄 If the product has coupon papers, create coupons
                if coupon_paper_count > 0:
                    for i in range(product['qty']):
                        self.env['az.coupon'].create({
                            'name': product['full_product_name'],
                            'page_count': coupon_paper_count,
                            'pos_order_id': order.id,
                            'partner_id': order.partner_id.id,
                            'product_id': product_id.id
                        })

    # 📄 Function to handle papers based on order values
    def handle_papers(self, values):
        product_template_id = 3733  # 🆔 Hardcoded product template ID
        product_id = self.env['product.product'].search([('product_tmpl_id', '=', product_template_id)])
        partner_id = values['partner_id']
        new_lines = values['lines'][::]
        # 🛠 Loop through each line in the order values
        for line in values['lines']:
            if line[2]['product_id'] == product_id.id:
                qty = line[2]['qty']  # 📏 Get the quantity of the product

                # 🔍 Count the total valid coupon papers for this partner
                total_valid_papers = self.env['az.coupon.paper'].search_count(
                    [('coupon_book_id.partner_id', '=', partner_id), ('state', '=', 'valid')]
                )

                # 🚫 Raise an error if the requested quantity exceeds total valid papers
                if qty > total_valid_papers:
                    raise ValueError(
                        f"Requested quantity ({qty}) exceeds the total number of valid coupon papers ({total_valid_papers}).")

                # ♻️ Loop until all quantities are handled
                while qty > 0:
                    # 📚 Get the oldest valid coupon book for this partner
                    coupon_book = self.env['az.coupon'].search(
                        [('partner_id', '=', partner_id), ('state', '=', 'valid')],
                        order='id asc', limit=1
                    )

                    if not coupon_book:
                        break  # 🚪 Exit loop if no valid coupon book is found

                    # 📝 Get the required number of coupon papers from the coupon book
                    coupon_papers = self.env['az.coupon.paper'].search(
                        [('coupon_book_id', '=', coupon_book.id), ('state', '=', 'valid')],
                        order='id asc', limit=qty
                    )

                    if not coupon_papers:
                        break  # 🚪 Exit loop if no valid coupon papers are found

                    # ✅ Update the state of each paper to 'used'
                    for paper in coupon_papers:
                        paper.state = 'used'
                        qty -= 1  # 📉 Decrease the remaining quantity

                    # 🏁 If this coupon book is exhausted, mark it as used
                    if not self.env['az.coupon.paper'].search(
                            [('coupon_book_id', '=', coupon_book.id), ('state', '=', 'valid')]):
                        coupon_book.state = 'used'

                # ✨ Add a new line with the coupon product
                new_lines = self.add_coupon_product_line(new_lines, line[2]['qty'])
        values['lines'] = new_lines
        return values

    # ➕ Function to add a new line with the coupon product
    def add_coupon_product_line(self, new_lines, qty):
        coupon_product_template_id = 4  # 🆕 Hardcoded new product template ID
        coupon_product_id = self.env['product.product'].search([('product_tmpl_id', '=', coupon_product_template_id)])
        import copy
        new_line = copy.deepcopy(new_lines[-1])
        new_line[2]['id'] += 1
        new_line[2]['name'] = new_line[2]['name'][0:6] + str(int(new_line[2]['name'][6:]) + 1)
        new_line[2]['full_product_name'] = "استبدال قارورة مياه/5 جالون"
        new_line[2]['product_id'] = coupon_product_id.id

        new_lines.append(new_line)
        return new_lines

    @api.model
    def create(self, values):
        values = self.handle_papers(values)  # 🖋 Handle papers for the order

        session = self.env['pos.session'].browse(values['session_id'])  # 📅 Get the POS session
        values = self._complete_values_from_session(session, values)  # ✍ Complete order values from session
        order = super(PosOrder, self).create(values)  # 🌟 Create the order

        self.create_coupon(order, values)  # 🎁 Create coupons for the order

        return order  # 🔄 Return the created order

===== .\models\product_template.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class Coupon(models.Model):
    _inherit = 'product.template'

    coupon_paper_count = fields.Integer(string='Coupon Paper Count')
===== .\models\__init__.py =====
# -*- coding: utf-8 -*-
from . import coupon_coupon
from . import coupon_coupon_paper
from . import product_template
from . import pos_order
===== .\security\ir.model.access.csv =====
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_az_coupon_user,access_az_coupon_user,model_az_coupon,base.group_user,1,1,1,1
access_az_coupon_admin,access_az_coupon_admin,model_az_coupon,base.group_system,1,1,1,1
access_az_coupon_paper_user,access_az_coupon_paper_user,model_az_coupon_paper,base.group_user,1,1,1,1
access_az_coupon_paper_admin,access_az_coupon_paper_admin,model_az_coupon_paper,base.group_system,1,1,1,1
===== .\static\src\js\pos_coupon.js =====
odoo.define('pos_coupon.Coupon', function (require) {
    "use strict";

    var models = require('point_of_sale.models');
    var screens = require('point_of_sale.screens');
    var core = require('web.core');
    var _t = core._t;

});
===== .\views\coupon_coupon.xml =====
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Form view for az.coupon -->
        <record id="view_az_coupon_form" model="ir.ui.view">
            <field name="name">az.coupon.form</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <form string="Coupon">
                    <header>
                        <field name="state" widget="statusbar" statusbar_visible="draft,valid,used"/>
                    </header>
                    <sheet>
                        <group>
                            <group>
                                <field name='id' invisible="1"/>
                                <field name="name"/>
                                <field name="code" attrs="{'invisible': [('id', '=', False)]}"/>
                                <field name="pos_order_id"/>
                            </group>
                            <group>
                                <field name="partner_id"/>
                                <field name="page_count"/>
                                <field name="available_count"/>
                                <field name="used_count"/>
                            </group>
                        </group>
                        <group>
                            <field name="paper_ids">
                                <tree string="Papers">
                                    <field name="code"/>
                                    <field name="state"/>
                                </tree>
                                <form string="Paper">
                                    <sheet>
                                        <group>
                                            <field name="code"/>
                                            <field name="state"/>
                                        </group>
                                    </sheet>
                                </form>
                            </field>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>


        <!-- Tree view for az.coupon -->
        <record id="view_az_coupon_tree" model="ir.ui.view">
            <field name="name">az.coupon.tree</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <tree string="Coupons" decoration-success="state == 'valid'">
                    <field name="code"/>
                    <field name="state"/>
                    <field name="name"/>
                    <field name="page_count"/>
                    <field name="available_count"/>
                    <field name="used_count"/>
                    <field name="pos_order_id"/>
                    <field name="partner_id"/>
                </tree>
            </field>
        </record>


        <!-- Action for az.coupon -->
        <record id="action_az_coupons" model="ir.actions.act_window">
            <field name="name">Coupons</field>
            <field name="res_model">az.coupon</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_az_coupon_tree"/>
        </record>
        <!-- Action for az.coupon -->
        <record id="action_az_coupons" model="ir.actions.act_window">
            <field name="name">Coupons</field>
            <field name="res_model">az.coupon</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_az_coupon_tree"/>
        </record>

        <menuitem id="menu_az_coupons_coupons"
                  name="Coupons 🎫"
                  parent="point_of_sale.pos_config_menu_catalog"
                  action="action_az_coupons"/>


    </data>
</odoo>
===== .\views\product_template.xml =====
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_product_product_form_inherit" model="ir.ui.view">
        <field name="name">product.product.form.inherit</field>
        <field name="model">product.template</field>
        <field name="inherit_id" ref="product.product_template_form_view"/>
        <field name="arch" type="xml">
            <field name="description" position="before">
                <field name="coupon_paper_count"/>
            </field>
        </field>
    </record>
</odoo>

