Directory Structure:
├── models
│   ├── coupon_coupon.py
│   ├── coupon_coupon_paper.py
│   ├── pos_order.py
│   ├── product_template.py
│   ├── __init__.py
│
├
├── security
│   └── ir.model.access.csv
├── static
│   ├── description
│   │   └── icon.png
│   └── src
│       └── js
│           └── pos_coupon.js
├── views
│   ├── coupon_coupon.xml
│   └── product_template.xml
├── __init__.py
├── __manifest__.py




===== .\__init__.py =====
# -*- coding: utf-8 -*-
from . import models
===== .\__manifest__.py =====
{
    "name": "AZ - Coupons",
    "version": "15.0.1.0",
    "license": "LGPL-3",
    "category": "Sales",
    "depends": ["point_of_sale", "pos_coupon"],
    "data": [
        'views/coupon_coupon.xml',
        'views/product_template.xml',
        'security/ir.model.access.csv',
    ],

    'assets': {
        'point_of_sale.assets': [
            'az_coupons/static/src/js/**/*.js',
        ], },
    "installable": True,
    "auto_install": False,
}
===== .\models\coupon_coupon.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class Coupon(models.Model):
    _name = 'az.coupon'

    name = fields.Char(string='Name', readonly=True)
    page_count = fields.Integer(string='Page Count', readonly=True)

    code = fields.Char(string='Code', readonly=True)
    paper_ids = fields.One2many('az.coupon.paper', 'coupon_book_id', string='Papers')
    pos_order_id = fields.Many2one('pos.order', string='POS Order',readonly = True)
    partner_id = fields.Many2one(related='pos_order_id.partner_id', string='Partner', readonly=True)
    product_id = fields.Many2one(related='pos_order_id.lines.product_id', string='Product', readonly = True)

    available_count = fields.Integer(compute='_compute_available_count', string='Available')
    used_count = fields.Integer(compute='_compute_available_count', string='Used')

    partner_name = fields.Char(related='partner_id.name', string='Partner Name', readonly=True)
    partner_code = fields.Char(related='partner_id.code', string='Partner Code', readonly=True)


    @api.depends('paper_ids')
    def _compute_available_count(self):
        # get the count of papers where state = 'valid'
        for coupon in self:
            coupon.available_count = self.env['az.coupon.paper'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'valid')]
            )
            coupon.used_count = self.env['az.coupon.paper'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'used')]
            )


    state = fields.Selection([
        ('valid', 'Valid'),
        ('sent', 'Sent'),
        ('used', 'Used'),
        ('cancel', 'Cancelled')
    ], required=True, default='valid')

    @api.model
    def _default_session(self):
        return self.env['pos.session'].search([], limit=1)

    session_id = fields.Many2one('pos.session', string='Session', default=_default_session)

    @api.model
    def _generate_code(self):
        """Generate a code in the format YYMMSSSS where:
        - YY: Last two digits of the year
        - MM: Two-digit month
        - SSSS: A 4-digit serial number incremented from the last coupon.
        """
        current_year = datetime.now().year % 100  # Last two digits of the year
        current_month = datetime.now().month  # Two-digit month

        # Find the last generated code
        last_coupon = self.search([], order='id desc', limit=1)

        if last_coupon and last_coupon.code:
            last_serial = int(last_coupon.code[-4:])  # Extract the last 4 digits as serial number
            new_serial = last_serial + 1
        else:
            new_serial = 1  # Start with 0001 if no previous coupon exists

        # Format the components into a string
        code = f"{current_year:02d}{current_month:02d}{new_serial:04d}"

        return code

    @api.model
    def create(self, vals):
        vals['code'] = self._generate_code()
        new_coupon = super(Coupon, self).create(vals)

        page_count = vals.get('page_count')
        # Generate 20 az.coupon.paper records
        paper_vals_list = [{
            'code': f"{new_coupon.code}-{i:03d}",
            'coupon_book_id': new_coupon.id
        } for i in range(1, page_count + 1)]

        self.env['az.coupon.paper'].create(paper_vals_list)

        return new_coupon

===== .\models\coupon_coupon_paper.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models

class CouponPaper(models.Model):
    _name = 'az.coupon.paper'
    _description = "Coupon Paper"
    _rec_name = 'code'

    coupon_book_id = fields.Many2one('az.coupon', string='Coupon Book', ondelete='cascade')
    code = fields.Char(required=True, readonly=True)
    state = fields.Selection([
        ('valid', 'Valid'),
        ('sent', 'Sent'),
        ('used', 'Used'),
        ('cancel', 'Cancelled')
    ], required=True, default='valid')
===== .\models\pos_order.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import api, fields, models, tools, _
import psycopg2
import logging

_logger = logging.getLogger(__name__)


class PosOrder(models.Model):
    _inherit = "pos.order"

    # 📜 Function to create a coupon based on the order lines
    def create_coupon(self, order, values):
        # 🎨 Loop through each line in the order
        for line in values['lines']:
            product = line[2]
            # 🧐 Check if the product name contains 'book' or 'دفتر'
            if 'book' in product['full_product_name'].lower() or 'دفتر' in product['full_product_name'].lower():
                product_id = self.env['product.product'].browse(product['product_id'])
                coupon_paper_count = product_id.coupon_paper_count
                # 🔄 If the product has coupon papers, create coupons
                if coupon_paper_count > 0:
                    for i in range(product['qty']):
                        self.env['az.coupon'].create({
                            'name': product['full_product_name'],
                            'page_count': coupon_paper_count,
                            'pos_order_id': order.id,
                            'partner_id': order.partner_id.id,
                            'product_id': product_id.id
                        })

    # 📄 Function to handle papers based on order values
    @api.model
    def handle_papers(self, values):
        product_template_id = 3733  # TODO: Hardcode - convert to settings
        product_id = self.env['product.product'].search([('product_tmpl_id', '=', product_template_id)])
        partner_id = values['partner_id']
        used_coupons = set()  # List to store the IDs and codes of used coupons

        for line in values['lines']:
            if line[2]['product_id'] == product_id.id:
                qty = line[2]['qty']  # 📏 Get the quantity of the product

                # 🔍 Count the total valid coupon papers for this partner
                total_valid_papers = self.env['az.coupon.paper'].search_count(
                    [('coupon_book_id.partner_id', '=', partner_id), ('state', '=', 'valid')]
                )

                # ♻️ Loop until all quantities are handled
                while qty > 0:
                    # 📚 Get the oldest valid coupon book for this partner
                    coupon_book = self.env['az.coupon'].search(
                        [('partner_id', '=', partner_id), ('state', '=', 'valid')],
                        order='id asc', limit=1
                    )

                    if not coupon_book:
                        break  # 🚪 Exit loop if no valid coupon book is found

                    # 📝 Get the required number of coupon papers from the coupon book
                    coupon_papers = self.env['az.coupon.paper'].search(
                        [('coupon_book_id', '=', coupon_book.id), ('state', '=', 'valid')],
                        order='id asc', limit=qty
                    )

                    if not coupon_papers:
                        break  # 🚪 Exit loop if no valid coupon papers are found

                    # ✅ Update the state of each paper to 'used'
                    for paper in coupon_papers:
                        paper.state = 'used'
                        qty -= 1  # 📉 Decrease the remaining quantity
                        used_coupons.add(coupon_book.code)  # Add ID and code to the list
                    # 🏁 If this coupon book is exhausted, mark it as used
                    if not self.env['az.coupon.paper'].search(
                            [('coupon_book_id', '=', coupon_book.id), ('state', '=', 'valid')]):
                        coupon_book.state = 'used'

        return used_coupons  # Return the list of used coupon IDs and codes

    @api.model
    def create(self, values):
        session = self.env['pos.session'].browse(values['session_id'])
        values = self._complete_values_from_session(session, values)
        order = super(PosOrder, self).create(values)
        self.create_coupon(order, values)

        # Send WhatsApp message
        self.send_whatsapp_message(order)

        return order

    def send_whatsapp_message(self, order):
        # TODO: Hardcoded - convert to settings settings
        import requests
        body = f"Order has been made \n Partner: {order.partner_id.name} \n  Session: {order.session_id.name}"
        data = {
            'To': 'whatsapp:+971527006631',
            'From': 'whatsapp:+14155238886',
            'Body': body,
        }

        response = requests.post(
            'https://api.twilio.com/2010-04-01/Accounts/ACe163c62ab44430affdf900abef670659/Messages.json',
            data=data,
            auth=('ACe163c62ab44430affdf900abef670659', '588fb1681095b0bba077163f521a69d5'),
        )

    @api.model
    def _process_order(self, order, draft, existing_order):
        """Create or update an pos.order from a given dictionary.

        :param dict order: dictionary representing the order.
        :param bool draft: Indicate that the pos_order is not validated yet.
        :param existing_order: order to be updated or False.
        :type existing_order: pos.order.
        :returns: id of created/updated pos.order
        :rtype: int
        """
        order = order['data']
        pos_session = self.env['pos.session'].browse(order['pos_session_id'])
        if pos_session.state == 'closing_control' or pos_session.state == 'closed':
            order['pos_session_id'] = self._get_valid_session(order).id

        #  /\_/\
        # ( ◕‿◕ )
        #  >   <
        # Beginning: Ehab
        # Prevent Making Invoice or stock move for coupon papers
        new_lines = []
        no_invoice = False
        for line in order['lines']:
            if line[2]['product_id'] == 3562:  # TODO: Hardcode - Settings
                no_invoice = True
            else:
                new_lines.append(line)
        order['lines'] = new_lines
        # ______ (｡◔‿◔｡) ________ End of code

        pos_order = False
        if not existing_order:
            pos_order = self.create(self._order_fields(order))
        else:
            pos_order = existing_order
            pos_order.lines.unlink()
            order['user_id'] = pos_order.user_id.id
            pos_order.write(self._order_fields(order))

        pos_order = pos_order.with_company(pos_order.company_id)
        self = self.with_company(pos_order.company_id)
        self._process_payment_lines(order, pos_order, pos_session, draft)

        if not draft:
            try:
                pos_order.action_pos_order_paid()
            except psycopg2.DatabaseError:
                # do not hide transactional errors, the order(s) won't be saved!
                raise
            except Exception as e:
                _logger.error('Could not fully process the POS Order: %s', tools.ustr(e))

            # ______ (｡◔‿◔｡) _____
            # if not no_invoice:
            pos_order._create_order_picking()
            pos_order._compute_total_cost_in_real_time()
            # ______ (｡◔‿◔｡) ________ End of code

        if not draft and pos_order.to_invoice and pos_order.state == 'paid' and (
                hasattr(pos_order, 'invoice_id')) and not pos_order.invoice_id:
            pos_order._create_invoice()

        if pos_order.to_invoice and pos_order.state == 'paid' and not no_invoice:  # ______ (｡◔‿◔｡) _____
            pos_order._generate_pos_order_invoice()

        # ______ (｡◔‿◔｡) ________ End of code

        return pos_order.id

===== .\models\product_template.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class Coupon(models.Model):
    _inherit = 'product.template'

    coupon_paper_count = fields.Integer(string='Coupon Paper Count')
===== .\models\__init__.py =====
# -*- coding: utf-8 -*-
from . import coupon_coupon
from . import coupon_coupon_paper
from . import product_template
from . import pos_order
===== .\security\ir.model.access.csv =====
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_az_coupon_user,access_az_coupon_user,model_az_coupon,base.group_user,1,1,1,1
access_az_coupon_admin,access_az_coupon_admin,model_az_coupon,base.group_system,1,1,1,1
access_az_coupon_paper_user,access_az_coupon_paper_user,model_az_coupon_paper,base.group_user,1,1,1,1
access_az_coupon_paper_admin,access_az_coupon_paper_admin,model_az_coupon_paper,base.group_system,1,1,1,1
===== .\static\src\js\pos_coupon.js =====
odoo.define('pos_coupon.Coupon', function (require) {
    "use strict";

    const PaymentScreen = require('point_of_sale.PaymentScreen');
    const Registries = require('point_of_sale.Registries');
    const models = require('point_of_sale.models');
    const rpc = require('web.rpc');

    models.Order = models.Order.extend({
        add_coupon_product_line: async function () {
            const original_product_id = 3562;
            const new_product_template_id = 4; // New product template ID
            const new_product = this.pos.db.get_product_by_id(new_product_template_id);
            if (!new_product) {
                console.error('New product not found');
                return;
            }

            const partner_id = this.get_client().id;

            const total_valid_papers = await rpc.query({
                model: 'az.coupon.paper',
                method: 'search_count',
                args: [[['coupon_book_id.partner_id', '=', partner_id], ['state', '=', 'valid']]],
            });

            let required_qty = 0;
            const order_lines = this.get_orderlines();
            order_lines.forEach(line => {
                if (line.product.id === original_product_id) {
                    required_qty += line.quantity;
                }
            });

            if (required_qty > total_valid_papers) {
                this.pos.gui.show_popup('error', {
                    'title': _t('Not enough valid coupons'),
                    'body': _t(`Requested quantity (${required_qty}) exceeds the total number of valid coupon papers (${total_valid_papers}).`),
                });
                return;
            }

            const order = this.export_as_JSON(); // This prepares the order in a format suitable for backend processing

            // Call the handle_papers function from Python and get the result
            const used_coupons = await rpc.query({
                model: 'pos.order',
                method: 'handle_papers',
                args: [order],
            });

            // Assuming used_coupons is a string or similar that can be directly used
            const full_name = "استبدال قارورة مياه/5 جالون" + "\n" + " دفتر كوبون " + used_coupons // Format the result to a string, adjust according to actual data structure



            order_lines.forEach(line => {
                if (line.product.id === original_product_id) {
                    this.add_product(new_product, {
                        price:0  ,
                        product_description: full_name,
                        quantity: line.quantity,
                        extras: {
                            full_product_name: full_name // Use the result from the RPC call here
                        }
                    });
                }
            });
        }
    });

    const POSValidateOverride = PaymentScreen =>
        class extends PaymentScreen {
            async validateOrder(isForceValidate) {
                if (this.currentOrder.get_orderlines().length > 0) {
                    await this.currentOrder.add_coupon_product_line();
                }
                await super.validateOrder(isForceValidate);
            }
        };

    Registries.Component.extend(PaymentScreen, POSValidateOverride);

    return PaymentScreen;
});

===== .\views\coupon_coupon.xml =====
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Form view for az.coupon -->
        <record id="view_az_coupon_form" model="ir.ui.view">
            <field name="name">az.coupon.form</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <form string="Coupon">
                    <header>
                        <field name="state" widget="statusbar" statusbar_visible="draft,valid,used"/>
                    </header>
                    <sheet>
                        <group>
                            <group>
                                <field name='id' invisible="1"/>
                                <field name="name"/>
                                <field name="code" attrs="{'invisible': [('id', '=', False)]}"/>
                                <field name="pos_order_id"/>
                            </group>
                            <group>
                                <field name="partner_id"/>
                                <field name="page_count"/>
                                <field name="available_count"/>
                                <field name="used_count"/>
                            </group>
                        </group>
                        <group>
                            <field name="paper_ids">
                                <tree string="Papers">
                                    <field name="code"/>
                                    <field name="state"/>
                                </tree>
                                <form string="Paper">
                                    <sheet>
                                        <group>
                                            <field name="code"/>
                                            <field name="state"/>
                                        </group>
                                    </sheet>
                                </form>
                            </field>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>


        <!-- Tree view for az.coupon -->
        <record id="view_az_coupon_tree" model="ir.ui.view">
            <field name="name">az.coupon.tree</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <tree string="Coupons" decoration-success="state == 'valid'">
                    <field name="code"/>
                    <field name="state" widget="badge" decoration-success="state == 'valid'" decoration-danger="state == 'used'"/>
                    <field name="name"/>
                    <field name="page_count"/>
                    <field name="available_count"/>
                    <field name="used_count"/>
                    <field name="pos_order_id"/>
                    <field name="partner_id" invisible="1"/>
                    <field name="partner_code"/>
                    <field name="partner_name"/>
                </tree>
            </field>
        </record>

        <!-- Search view for az.coupon -->
        <record id="view_az_coupon_search" model="ir.ui.view">
            <field name="name">az.coupon.search</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <search string="Search Coupons">
                    <field name="code"/>
                    <field name="partner_code"/>
                    <field name="partner_name"/>
                    <filter string="Valid" name="valid" domain="[('state', '=', 'valid')]"/>
                    <filter string="Used" name="used" domain="[('state', '=', 'used')]"/>
                    <group expand="0" string="Group By">
                        <filter string="State" name="group_state" context="{'group_by': 'state'}"/>
                    </group>
                </search>
            </field>
        </record>


        <!-- Action for az.coupon -->
        <record id="action_az_coupons" model="ir.actions.act_window">
            <field name="name">Coupons</field>
            <field name="res_model">az.coupon</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_az_coupon_tree"/>
        </record>
        <!-- Action for az.coupon -->
        <record id="action_az_coupons" model="ir.actions.act_window">
            <field name="name">Coupons</field>
            <field name="res_model">az.coupon</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_az_coupon_tree"/>
        </record>

        <menuitem id="menu_az_coupons_coupons"
                  name="Coupons 🎫"
                  parent="point_of_sale.pos_config_menu_catalog"
                  action="action_az_coupons"/>


    </data>
</odoo>
===== .\views\product_template.xml =====
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_product_product_form_inherit" model="ir.ui.view">
        <field name="name">product.product.form.inherit</field>
        <field name="model">product.template</field>
        <field name="inherit_id" ref="product.product_template_form_view"/>
        <field name="arch" type="xml">
            <field name="description" position="before">
                <field name="coupon_paper_count"/>
            </field>
        </field>
    </record>
</odoo>

