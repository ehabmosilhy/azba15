Directory Structure:
├── i18n
│   └── ar_001.po
├── models
│   ├── coupon_coupon.py
│   ├── coupon_coupon_page.py
│   ├── pos_order.py
│   ├── settings.py
│   ├── __init__.py
│   └── __pycache__
│       ├── coupon_coupon.cpython-38.pyc
│       ├── coupon_coupon_page.cpython-38.pyc
│       ├── pos_order.cpython-38.pyc
│       ├── settings.cpython-38.pyc
│       └── __init__.cpython-38.pyc
├── out.txt
├── security
│   └── ir.model.access.csv
├── static
│   ├── description
│   │   └── icon.png
│   └── src
│       └── js
│           └── pos_coupon.js
├── views
│   ├── coupon_coupon.xml
│   └── res_config_settings.xml
├── __init__.py
├── __manifest__.py
└── __pycache__
    └── __init__.cpython-38.pyc


===== .\out.txt =====

===== .\__init__.py =====
# -*- coding: utf-8 -*-
from . import models
===== .\__manifest__.py =====
{
    "name": "AZ - Coupons",
    "version": "15.0.1.0",
    "license": "LGPL-3",
    "category": "Sales",
    "depends": ["point_of_sale", "pos_coupon"],
    "data": [
        'views/coupon_coupon.xml',
        'views/res_config_settings.xml',
        'security/ir.model.access.csv',
    ],

    'assets': {
        'point_of_sale.assets': [
            'az_coupons/static/src/js/**/*.js',
        ], },
    "installable": True,
    "auto_install": False,
}
===== .\i18n\ar_001.po =====
#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">Coupon Book Products</span>"
msgstr "<span class=\"o_form_label\">أصناف دفتر الكوبونات</span>"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">Coupon Page Product</span>"
msgstr "<span class=\"o_form_label\">صنف  الكوبون</span>"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">Twilio Account SID</span>"
msgstr "<span class=\"o_form_label\">SID حساب Twilio</span>"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">Twilio Auth Token</span>"
msgstr "<span class=\"o_form_label\">رمز مصادقة Twilio</span>"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">WhatsApp From Number</span>"
msgstr "<span class=\"o_form_label\">رقم واتساب المرسل</span>"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "<span class=\"o_form_label\">WhatsApp To Number</span>"
msgstr "<span class=\"o_form_label\">رقم واتساب المستلم</span>"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__available_count
msgid "Available"
msgstr "متاح"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__code
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__code
msgid "Code"
msgstr "رمز"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__config_id
msgid "Config"
msgstr "تهيئة"

#. module: az_coupons
#: model:ir.model,name:az_coupons.model_res_config_settings
msgid "Config Settings"
msgstr "تهيئة الإعدادات"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_form
msgid "Coupon"
msgstr "كوبون"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__coupon_book_id
msgid "Coupon Book"
msgstr "دفتر الكوبونات"

#. module: az_coupons
#: model:ir.model,name:az_coupons.model_coupon_book_product
msgid "Coupon Book Product"
msgstr "صنف دفتر الكوبونات"


#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__coupon_book_product_ids
msgid "Coupon Book Products"
msgstr "أصناف دفتر الكوبونات"

#. module: az_coupons
#: model:ir.model,name:az_coupons.model_az_coupon_page
msgid "Coupon Page"
msgstr " الكوبون"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__coupon_page_product
msgid "Coupon Page Product"
msgstr "صنف الكوبون"

#. module: az_coupons
#: code:addons/az_coupons/models/pos_order.py:0
#: code:addons/az_coupons/models/pos_order.py:0
#, python-format
msgid "Coupon Page Product is not set in the settings. Please configure it first."
msgstr "صنف  الكوبون غير محدد في الإعدادات. يرجى تهيئته أولاً."

#. module: az_coupons
#: model:ir.actions.act_window,name:az_coupons.action_az_coupons
#: model:ir.ui.menu,name:az_coupons.menu_az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_tree
msgid "Coupons"
msgstr "كوبونات"

#. module: az_coupons
#: model:ir.actions.act_window,name:az_coupons.action_az_coupons_settings
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "Coupons Settings"
msgstr "إعدادات الكوبونات"

#. module: az_coupons
#: model:ir.ui.menu,name:az_coupons.menu_az_coupons_coupons
msgid "Coupons 🎫"
msgstr "كوبونات 🎫"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__create_uid
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__create_uid
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__create_uid
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__create_uid
msgid "Created by"
msgstr "تم الإنشاء بواسطة"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__create_date
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__create_date
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__create_date
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__create_date
msgid "Created on"
msgstr "تم الإنشاء في"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__date_used
msgid "Date Used"
msgstr "تاريخ الاستخدام"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__display_name
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__display_name
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__display_name
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__display_name
msgid "Display Name"
msgstr "اسم العرض"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_search
msgid "Group By"
msgstr "التجميع بواسطة"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__id
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__id
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__id
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__id
msgid "ID"
msgstr "معرف"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon____last_update
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page____last_update
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product____last_update
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line____last_update
msgid "Last Modified on"
msgstr "آخر تعديل في"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__write_uid
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__write_uid
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__write_uid
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__write_uid
msgid "Last Updated by"
msgstr "آخر تحديث بواسطة"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__write_date
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__write_date
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__write_date
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__write_date
msgid "Last Updated on"
msgstr "آخر تحديث في"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__name
msgid "Name"
msgstr "الاسم"

#. module: az_coupons
#: model:ir.model.fields.selection,name:az_coupons.selection__az_coupon__state__valid
msgid "New"
msgstr "جديد"

#. module: az_coupons
#. openerp-web
#: code:addons/az_coupons/static/src/js/pos_coupon.js:0
#, python-format
msgid "Not enough valid coupons"
msgstr "لا توجد كوبونات صالحة كافية"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__pos_order_id
msgid "POS Order"
msgstr "طلب نقطة البيع"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_form
msgid "Page"
msgstr ""

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__page_count
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__page_count
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__page_count
msgid "Page Count"
msgstr "عدد الصفحات"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__page_ids
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_form
msgid "Pages"
msgstr "صفحات"

#. module: az_coupons
#: model:ir.model.fields.selection,name:az_coupons.selection__az_coupon__state__partial
msgid "Partially Used"
msgstr "مستخدم جزئيًا"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__partner_id
msgid "Partner"
msgstr "شريك"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__partner_code
msgid "Partner Code"
msgstr "رمز الشريك"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__partner_name
msgid "Partner Name"
msgstr "اسم الشريك"

#. module: az_coupons
#: model:ir.model,name:az_coupons.model_pos_order
msgid "Point of Sale Orders"
msgstr "طلبات نقطة البيع"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__product_id
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product__product_id
#: model:ir.model.fields,field_description:az_coupons.field_coupon_book_product_line__product_id
msgid "Product"
msgstr "الصنف"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "Products"
msgstr "الأصناف"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__receipt_number
msgid "Receipt Number"
msgstr "رقم الإيصال"

#. module: az_coupons
#. openerp-web
#: code:addons/az_coupons/static/src/js/pos_coupon.js:0
#, python-format
msgid "Requested quantity (${required_qty}) exceeds the total number of valid coupon pages (${total_valid_pages})."
msgstr "الكمية المطلوبة (${required_qty}) تتجاوز العدد الإجمالي لصفحات الكوبونات الصالحة (${total_valid_pages})."

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_search
msgid "Search Coupons"
msgstr "البحث عن الكوبونات"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__session_id
msgid "Session"
msgstr "الجلسة"

#. module: az_coupons
#: model:ir.ui.menu,name:az_coupons.menu_az_coupons_settings
msgid "Settings⚙️"
msgstr "الإعدادات⚙️"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__state
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon_page__state
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_search
msgid "State"
msgstr "الحالة"

#. module: az_coupons
#: code:addons/az_coupons/models/pos_order.py:0
#, python-format
msgid "The configured Coupon Page Product does not exist."
msgstr "صنف  الكوبون المهيأ غير موجود."

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__twilio_account_sid
msgid "Twilio Account SID"
msgstr "SID حساب Twilio"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__twilio_auth_token
msgid "Twilio Auth Token"
msgstr "رمز مصادقة Twilio"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_az_coupon__used_count
#: model:ir.model.fields.selection,name:az_coupons.selection__az_coupon__state__used
#: model:ir.model.fields.selection,name:az_coupons.selection__az_coupon_page__state__used
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_search
msgid "Used"
msgstr "مستخدم"

#. module: az_coupons
#: model:ir.model.fields.selection,name:az_coupons.selection__az_coupon_page__state__valid
#: model_terms:ir.ui.view,arch_db:az_coupons.view_az_coupon_search
msgid "Valid"
msgstr "صالح"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__whatsapp_from_number
msgid "WhatsApp From Number"
msgstr "رقم واتساب المرسل"

#. module: az_coupons
#: model:ir.model.fields,field_description:az_coupons.field_res_config_settings__whatsapp_to_number
msgid "WhatsApp To Number"
msgstr "رقم واتساب المستلم"

#. module: az_coupons
#: model_terms:ir.ui.view,arch_db:az_coupons.res_config_view_form_inherit_pos_coupon
msgid "Whatsapp"
msgstr "واتساب"

#. module: az_coupons
#: model:ir.model,name:az_coupons.model_az_coupon
msgid "az.coupon"
msgstr "كوبون"

===== .\models\coupon_coupon.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models, api
from datetime import datetime


class Coupon(models.Model):
    _name = 'az.coupon'

    name = fields.Char(string='Name', readonly=True)
    page_count = fields.Integer(string='Page Count', readonly=True)

    code = fields.Char(string='Code', readonly=True)
    page_ids = fields.One2many('az.coupon.page', 'coupon_book_id', string='Pages')
    receipt_number = fields.Char(string='Receipt Number', readonly=True)
    pos_order_id = fields.Many2one('pos.order', string='POS Order',readonly = True)
    partner_id = fields.Many2one(related='pos_order_id.partner_id', string='Partner', readonly=True)
    product_id = fields.Many2one(related='pos_order_id.lines.product_id', string='Product', readonly = True)

    available_count = fields.Integer(compute='_compute_available_count', string='Available')
    used_count = fields.Integer(compute='_compute_available_count', string='Used')

    partner_name = fields.Char(related='partner_id.name', string='Partner Name', readonly=True)
    partner_code = fields.Char(related='partner_id.code', string='Partner Code', readonly=True)


    @api.depends('page_ids')
    def _compute_available_count(self):
        # get the count of pages where state = 'valid'
        for coupon in self:
            coupon.available_count = self.env['az.coupon.page'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'valid')]
            )
            coupon.used_count = self.env['az.coupon.page'].search_count(
                [('coupon_book_id', '=', coupon.id), ('state', '=', 'used')]
            )


    state = fields.Selection([
        ('valid', 'New'),
        ('partial', 'Partially Used'),
        ('used', 'Used'),
    ], required=True, default='valid')

    @api.model
    def _default_session(self):
        return self.env['pos.session'].search([], limit=1)

    session_id = fields.Many2one('pos.session', string='Session', default=_default_session)

    @api.model
    def _generate_code(self):
        """Generate a code in the format YYMMSSSS where:
        - YY: Last two digits of the year
        - MM: Two-digit month
        - SSSS: A 4-digit serial number incremented from the last coupon.
        """
        current_year = datetime.now().year % 100  # Last two digits of the year
        current_month = datetime.now().month  # Two-digit month

        # Find the last generated code
        last_coupon = self.search([], order='id desc', limit=1)

        if last_coupon and last_coupon.code:
            last_serial = int(last_coupon.code[-4:])  # Extract the last 4 digits as serial number
            new_serial = last_serial + 1
        else:
            new_serial = 1  # Start with 0001 if no previous coupon exists

        # Format the components into a string
        code = f"{current_year:02d}{current_month:02d}{new_serial:04d}"

        return code

    @api.model
    def create(self, vals):
        vals['code'] = self._generate_code()
        new_coupon = super(Coupon, self).create(vals)

        page_count = vals.get('page_count')
        # Generate 20 az.coupon.page records
        page_vals_list = [{
            'code': f"{new_coupon.code}-{i:03d}",
            'coupon_book_id': new_coupon.id
        } for i in range(1, page_count + 1)]

        self.env['az.coupon.page'].create(page_vals_list)

        return new_coupon

===== .\models\coupon_coupon_page.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import fields, models

class CouponPage(models.Model):
    _name = 'az.coupon.page'
    _description = "Coupon Page"
    _rec_name = 'code'

    coupon_book_id = fields.Many2one('az.coupon', string='Coupon Book', ondelete='cascade')
    code = fields.Char(required=True, readonly=True)
    state = fields.Selection([
        ('valid', 'Valid'),
        ('used', 'Used'),
    ], required=True, default='valid')
    date_used = fields.Datetime(string='Date Used')
    pos_session_id = fields.Many2one('pos.session', string='Session', ondelete='cascade', readonly=True)


===== .\models\pos_order.py =====
# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import api, fields, models, tools, _
import psycopg2
import logging
from odoo.exceptions import UserError

_logger = logging.getLogger(__name__)


class PosOrder(models.Model):
    _inherit = "pos.order"

    # 📜 Function to create a coupon based on the order lines
    @api.model
    def create_coupon(self, receipt_number, product_id, qty):
        # 🎨 Loop through each line in the order
        # 🧐 Check if the product name contains 'book' or 'دفتر'
        created_coupons = []
        product = self.env['product.product'].browse(product_id)

        # Fetch the settings
        config = self.env['res.config.settings'].search([], limit=1)
        # Find the page count for the given product_id
        coupon_page_count = next(
            (line.page_count for line in config.coupon_book_product_ids if line.product_id.id == product_id), 0)
        # 🔄 If the product has coupon pages, create coupons
        if coupon_page_count > 0:
            for i in range(qty):
                id = self.env['az.coupon'].create({
                    'name': product.name,
                    'page_count': coupon_page_count,
                    'product_id': product_id
                    , 'receipt_number': receipt_number
                })
                created_coupons.append(id.code)

        return created_coupons

    # 📄 Function to handle pages based on order values
    @api.model
    def handle_pages(self, values):
        # Get the coupon_page_product from settings
        IrConfigParam = self.env['ir.config_parameter'].sudo()
        coupon_page_product_id = IrConfigParam.get_param('az_coupons.coupon_page_product')

        if not coupon_page_product_id:
            raise UserError(_("Coupon Page Product is not set in the settings. Please configure it first."))

        product_id = self.env['product.product'].browse(int(coupon_page_product_id))

        if not product_id.exists():
            raise UserError(_("The configured Coupon Page Product does not exist."))

        # Rest of your handle_pages method...
        partner_id = values['partner_id']
        used_coupons = []  # List to store the codes of used coupons

        for line in values['lines']:
            if line[2]['product_id'] == product_id.id:
                qty = line[2]['qty']  # Get the quantity of the product

                while qty > 0:
                    # Get the oldest valid or partial coupon book for this partner
                    coupon_book = self.env['az.coupon'].search(
                        [('partner_id', '=', partner_id), ('state', '!=', 'used')],
                        order='id asc', limit=1
                    )

                    if not coupon_book:
                        break  # Exit loop if no valid or partial coupon book is found

                    # Get the required number of coupon pages from the coupon book
                    coupon_pages = self.env['az.coupon.page'].search(
                        [('coupon_book_id', '=', coupon_book.id), ('state', '!=', 'used')],
                        order='id asc', limit=qty
                    )

                    if not coupon_pages:
                        break  # Exit loop if no valid coupon pages are found

                    # Update the state of each page to 'used'
                    for page in coupon_pages:
                        page.state = 'used'
                        page.date_used = fields.Datetime.now()
                        page.pos_session_id = values['pos_session_id']
                        qty -= 1  # Decrease the remaining quantity
                        used_coupons.append(page.code)  # Add code to the list

                    # Check the state of the coupon book after updating the pages
                    valid_pages_left = self.env['az.coupon.page'].search_count(
                        [('coupon_book_id', '=', coupon_book.id), ('state', '!=', 'used')]
                    )

                    if valid_pages_left == 0:
                        coupon_book.state = 'used'
                    else:
                        coupon_book.state = 'partial'

        return sorted(used_coupons)  # Return the list of used coupon codes

    @api.model
    def create(self, values):
        session = self.env['pos.session'].browse(values['session_id'])
        values = self._complete_values_from_session(session, values)
        order = super(PosOrder, self).create(values)

        # Send WhatsApp message
        self.send_whatsapp_message(order)
        self.update_coupon(order)
        return order

    def update_coupon(self, order):
        for line in order.lines:
            line.full_product_name = line.product_id.display_name
        reference = order.pos_reference.replace('Order', '').strip()
        coupons = self.env['az.coupon'].search([('receipt_number', '=', reference)])
        for coupon in coupons:
            coupon.pos_order_id = order.id

    """
    def send_whatsapp_message(self, order):
        # TODO: Hardcoded - convert to settings settings
        import requests
        body = f"Order has been made \n Partner: {order.partner_id.name} \n  Session: {order.session_id.name}"
        data = {
            'To': 'whatsapp:+971527006631',
            'From': 'whatsapp:+14155238886',
            'Body': body,
        }

        response = requests.post(
            'https://api.twilio.com/2010-04-01/Accounts/ACe163c62ab44430affdf900abef670659/Messages.json',
            data=data,
            auth=('ACe163c62ab44430affdf900abef670659', '588fb1681095b0bba077163f521a69d5'),
        )
    """

    @api.model
    def send_whatsapp_message(self, order):
        qty = 0
        for line in order.lines:
            if line.product_id.id == 4 and line.price_subtotal == 0:
                qty = int(line.qty)
        if not qty:
            return
        partner = order.partner_id
        coupons = self.env['az.coupon'].search([('partner_id', '=', partner.id)])
        remaining_coupons = len(coupons.mapped('page_ids').filtered(lambda p: p.state == 'valid'))
        last_used_coupons = coupons.mapped('page_ids').filtered(lambda p: p.state == 'used').sorted(
            key=lambda p: p.date_used, reverse=True)[:qty]
        last_used_coupons = last_used_coupons.mapped('code')

        import requests
        IrConfigParam = self.env['ir.config_parameter'].sudo()
        to_number = partner.mobile
        user_sender = "auth-mseg" #IrConfigParam.get_param('az_coupons.sms_user_sender')
        api_key = "395D8B0ABD3F882431C2452FA3B3360B" #IrConfigParam.get_param('az_coupons.sms_api_key')
        username = "samehelsawy" #IrConfigParam.get_param('az_coupons.sms_username')

        # if not all([to_number, user_sender, api_key, username]):
        #     return
            # raise ValueError("Please configure all SMS settings in the Coupons Settings.")

        body = (
            f"Dear {partner.name} \n A quantity of <{qty}> Bottles has been exchanged for coupon(s) "
            f"{last_used_coupons}.\nYou still have <{remaining_coupons}> valid coupons.\n"
            f"{'-' * 50}\n"
            f"عميلنا العزيز/ "
            f"{partner.name} \n"
            f"تم استبدال عدد "
            f"<{qty}>"
            f" قوارير فى مقابل الكوبونات"
            f" {last_used_coupons} "
            f"\n"
            f"يتبقى لديك عدد "
            f"<{remaining_coupons}>"
            f"كوبون صالح للاستخدام"
        )

        data = {
            'userName': username,
            'apiKey': api_key,
            'numbers': to_number,
            'userSender': user_sender,
            'msg': body,
            'msgEncoding': 'UTF8',
            'timeToSend': 'now',
            'exactTime': '',
            'reqBulkId': 'false',
            'reqFilter': 'true',
        }

        response = requests.post(
            'https://www.msegat.com/gw/sendsms.php',
            data=data,
        )

        if response.status_code != 200:
            raise ValueError("Failed to send SMS message. Response: %s" % response.text)

        # WhatsApp section commented out
        # IrConfigParam = self.env['ir.config_parameter'].sudo()
        # to_number = IrConfigParam.get_param('az_coupons.whatsapp_to_number')
        # from_number = IrConfigParam.get_param('az_coupons.whatsapp_from_number')
        # account_sid = IrConfigParam.get_param('az_coupons.twilio_account_sid')
        # auth_token = IrConfigParam.get_param('az_coupons.twilio_auth_token')

        # if not all([to_number, from_number, account_sid, auth_token]):
        #     raise ValueError("Please configure all WhatsApp settings in the Coupons Settings.")

        # data = {
        #     'To': f'whatsapp:{to_number}',
        #     'From': f'whatsapp:{from_number}',
        #     'Body': body,
        # }

        # response = requests.post(
        #     f'https://api.twilio.com/2010-04-01/Accounts/{account_sid}/Messages.json',
        #     data=data,
        #     auth=(account_sid, auth_token),
        # )

        # if response.status_code != 201:
        #     raise ValueError("Failed to send WhatsApp message. Response: %s" % response.text)

    @api.model
    def _process_order(self, order, draft, existing_order):
        """Create or update an pos.order from a given dictionary.

        :param dict order: dictionary representing the order.
        :param bool draft: Indicate that the pos_order is not validated yet.
        :param existing_order: order to be updated or False.
        :type existing_order: pos.order.
        :returns: id of created/updated pos.order
        :rtype: int
        """
        order = order['data']
        pos_session = self.env['pos.session'].browse(order['pos_session_id'])
        if pos_session.state == 'closing_control' or pos_session.state == 'closed':
            order['pos_session_id'] = self._get_valid_session(order).id

        #  /\_/\
        # ( ◕‿◕ )
        #  >   <
        # Beginning: Ehab
        # Prevent Making Invoice or stock move for coupon pages
        IrConfigParam = self.env['ir.config_parameter'].sudo()
        coupon_page_product_id = IrConfigParam.get_param('az_coupons.coupon_page_product')

        if not coupon_page_product_id:
            raise UserError(_("Coupon Page Product is not set in the settings. Please configure it first."))

        coupon_page_product_id = int(coupon_page_product_id)

        new_lines = []
        no_invoice = False
        for line in order['lines']:
            if line[2]['product_id'] == coupon_page_product_id:
                no_invoice = True
            else:
                new_lines.append(line)
        order['lines'] = new_lines
        # ______ (｡◔‿◔｡) ________ End of code

        pos_order = False
        if not existing_order:
            pos_order = self.create(self._order_fields(order))
        else:
            pos_order = existing_order
            pos_order.lines.unlink()
            order['user_id'] = pos_order.user_id.id
            pos_order.write(self._order_fields(order))

        pos_order = pos_order.with_company(pos_order.company_id)
        self = self.with_company(pos_order.company_id)
        self._process_payment_lines(order, pos_order, pos_session, draft)

        if not draft:
            try:
                pos_order.action_pos_order_paid()
            except psycopg2.DatabaseError:
                # do not hide transactional errors, the order(s) won't be saved!
                raise
            except Exception as e:
                _logger.error('Could not fully process the POS Order: %s', tools.ustr(e))

            # ______ (｡◔‿◔｡) _____
            # if not no_invoice:
            pos_order._create_order_picking()
            pos_order._compute_total_cost_in_real_time()
            # ______ (｡◔‿◔｡) ________ End of code

        if not draft and pos_order.to_invoice and pos_order.state == 'paid' and (
                hasattr(pos_order, 'invoice_id')) and not pos_order.invoice_id:
            pos_order._create_invoice()

        if pos_order.to_invoice and pos_order.state == 'paid' and not no_invoice:  # ______ (｡◔‿◔｡) _____
            pos_order._generate_pos_order_invoice()

        # ______ (｡◔‿◔｡) ________ End of code

        return pos_order.id

===== .\models\settings.py =====
# -*- coding: utf-8 -*-
from odoo import api, fields, models

class CouponBookProduct(models.Model):
    _name = 'coupon.book.product'
    _description = 'Coupon Book Product'

    product_id = fields.Many2one('product.product', string="Product", required=True)
    page_count = fields.Integer(string="Page Count", required=True)

class CouponBookProductLine(models.TransientModel):
    _name = 'coupon.book.product.line'
    _description = 'Coupon Book Product Line'

    config_id = fields.Many2one('res.config.settings', string="Config")
    product_id = fields.Many2one('product.product', string="Product", required=True)
    page_count = fields.Integer(string="Page Count", required=True, default=1)

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'

    coupon_page_product = fields.Many2one('product.product', string="Coupon Page Product")
    coupon_book_product_ids = fields.One2many('coupon.book.product.line', 'config_id', string="Coupon Book Products")

    whatsapp_to_number = fields.Char(string="WhatsApp To Number")
    whatsapp_from_number = fields.Char(string="WhatsApp From Number")
    twilio_account_sid = fields.Char(string="Twilio Account SID")
    twilio_auth_token = fields.Char(string="Twilio Auth Token")

    @api.model
    def get_values(self):
        res = super(ResConfigSettings, self).get_values()
        IrConfigParam = self.env['ir.config_parameter'].sudo()

        # Get the existing coupon book products
        coupon_book_products = self.env['coupon.book.product'].search([])

        # Get the coupon page product
        coupon_page_product_id = IrConfigParam.get_param('az_coupons.coupon_page_product')
        coupon_page_product = False
        if coupon_page_product_id:
            coupon_page_product = int(coupon_page_product_id)

        res.update(
            whatsapp_to_number=IrConfigParam.get_param('az_coupons.whatsapp_to_number'),
            whatsapp_from_number=IrConfigParam.get_param('az_coupons.whatsapp_from_number'),
            twilio_account_sid=IrConfigParam.get_param('az_coupons.twilio_account_sid'),
            twilio_auth_token=IrConfigParam.get_param('az_coupons.twilio_auth_token'),
            coupon_page_product=coupon_page_product,
            coupon_book_product_ids=[(0, 0, {'product_id': p.product_id.id, 'page_count': p.page_count}) for p in
                                     coupon_book_products],
        )
        return res

    def set_values(self):
        super(ResConfigSettings, self).set_values()
        IrConfigParam = self.env['ir.config_parameter'].sudo()
        IrConfigParam.set_param('az_coupons.whatsapp_to_number', self.whatsapp_to_number)
        IrConfigParam.set_param('az_coupons.whatsapp_from_number', self.whatsapp_from_number)
        IrConfigParam.set_param('az_coupons.twilio_account_sid', self.twilio_account_sid)
        IrConfigParam.set_param('az_coupons.twilio_auth_token', self.twilio_auth_token)
        IrConfigParam.set_param('az_coupons.coupon_page_product', self.coupon_page_product.id if self.coupon_page_product else False)

        # Update coupon book products
        existing_products = self.env['coupon.book.product'].search([])
        existing_products.unlink()
        for line in self.coupon_book_product_ids:
            self.env['coupon.book.product'].create({
                'product_id': line.product_id.id,
                'page_count': line.page_count,
            })
===== .\models\__init__.py =====
# -*- coding: utf-8 -*-
from . import coupon_coupon
from . import coupon_coupon_page
from . import pos_order
from . import settings
===== .\security\ir.model.access.csv =====
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_az_coupon_user,access_az_coupon_user,model_az_coupon,base.group_user,1,1,1,1
access_az_coupon_admin,access_az_coupon_admin,model_az_coupon,base.group_system,1,1,1,1
access_az_coupon_page_user,access_az_coupon_page_user,model_az_coupon_page,base.group_user,1,1,1,1
access_az_coupon_page_admin,access_az_coupon_page_admin,model_az_coupon_page,base.group_system,1,1,1,1
access_coupon_book_product_user,access_coupon_book_product_user,model_coupon_book_product,base.group_user,1,1,1,1
access_coupon_book_product_admin,access_coupon_book_product_admin,model_coupon_book_product,base.group_system,1,1,1,1
access_coupon_book_product_line_user,access_coupon_book_product_line_user,model_coupon_book_product_line,base.group_user,1,1,1,1
access_coupon_book_product_line_admin,access_coupon_book_product_line_admin,model_coupon_book_product_line,base.group_system,1,1,1,1
===== .\static\src\js\pos_coupon.js =====
odoo.define('pos_coupon.Coupon', function(require) {
    "use strict";

    const PaymentScreen = require('point_of_sale.PaymentScreen');
    const Registries = require('point_of_sale.Registries');
    const models = require('point_of_sale.models');
    const rpc = require('web.rpc');

    models.Order = models.Order.extend({
        add_coupon_product_line: async function() {
            const original_product_id = 3562;
            const new_product_template_id = 4;
            const new_product = this.pos.db.get_product_by_id(new_product_template_id);

            if (!new_product) {
                console.error('New product not found');
                return;
            }

            const partner_id = this.get_client().id;
            const total_valid_pages = await rpc.query({
                model: 'az.coupon.page',
                method: 'search_count',
                args: [[['coupon_book_id.partner_id', '=', partner_id], ['state', '=', 'valid']]],
            });

            let required_qty = 0;
            const order_lines = this.get_orderlines();
            order_lines.forEach(line => {
                if (line.product.id === original_product_id) {
                    required_qty += line.quantity;
                }
            });

            if (required_qty > total_valid_pages) {
                this.pos.showPopup('ErrorPopup', {
                    title: this.env._t('Not enough valid coupons'),
                    body: this.env._t(`Requested quantity (${required_qty}) exceeds the total number of valid coupon pages (${total_valid_pages}).`),
                });
                return;
            }

            const order = this.export_as_JSON();
            const used_coupons = await rpc.query({
                model: 'pos.order',
                method: 'handle_pages',
                args: [order],
            });

            const full_name = "استبدال [قارورة مياه/5 جالون]" + "-" + " كوبونات: " + "," + used_coupons;
            const full_name_wrapped = full_name.split(',').join('\n');

            order_lines.forEach(line => {
                if (line.product.id === original_product_id) {
                    this.add_product(new_product, {
                        price: 0,
                        product_description: full_name,
                        quantity: line.quantity,
                        extras: { full_product_name: full_name_wrapped }
                    });
                }
            });
        },

        create_coupons: async function() {
            const order_lines = this.get_orderlines();
            for (let line of order_lines) {
                const product_name = line.get_full_product_name().toLowerCase();
                if (product_name.includes("دفتر كوبون") || product_name.includes("coupon book")) {
                    const quantity = line.get_quantity();
                    try {
                        const coupon_id = await rpc.query({
                            model: 'pos.order',
                            method: 'create_coupon',
                            args: [line.order.uid, line.get_product().id, quantity],
                        });
                        let updatedName = `${line.get_full_product_name()}  ${coupon_id}`;
                        const full_name_wrapped = updatedName.split(',').join('\n');
                        line.set_full_product_name(full_name_wrapped);
                    } catch (error) {
                        console.error('Error creating coupon:', error);
                        this.pos.showPopup('ErrorPopup', {
                            title: this.env._t('Error Creating Coupon'),
                            body: this.env._t('There was an error creating the coupon. Please try again.'),
                        });
                    }
                }
            }
        },
    });

    const POSValidateOverride = PaymentScreen => class extends PaymentScreen {
        async validateOrder(isForceValidate) {
            if (this.currentOrder.get_orderlines().length > 0) {
                await this.currentOrder.create_coupons();
                await this.currentOrder.add_coupon_product_line();
            }
            await super.validateOrder(isForceValidate);
        }
    };

    Registries.Component.extend(PaymentScreen, POSValidateOverride);

    return PaymentScreen;
});
===== .\views\coupon_coupon.xml =====
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Form view for az.coupon -->
        <record id="view_az_coupon_form" model="ir.ui.view">
            <field name="name">az.coupon.form</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <form string="Coupon">
                    <header>
                        <field name="state" widget="statusbar" statusbar_visible="draft,valid,used"/>
                    </header>
                    <sheet>
                        <group>
                            <group>
                                <field name='id' invisible="1"/>
                                <field name="name"/>
                                <field name="code" attrs="{'invisible': [('id', '=', False)]}"/>
                                <field name="pos_order_id"/>
                                <field name="create_date"/>
                            </group>
                            <group>
                                <field name="partner_id"/>
                                <field name="page_count"/>
                                <field name="available_count"/>
                                <field name="used_count"/>
                            </group>
                        </group>
                        <group>
                            <field name="page_ids">
                                <tree string="Pages">
                                    <field name="code"/>
                                    <field name="state" widget="badge" decoration-success="state == 'valid'"
                                           decoration-danger="state == 'used'"/>
                                    <field name="date_used"/>
                                    <field name="pos_session_id"/>
                                </tree>
                                <form string="Page">
                                    <sheet>
                                        <group>
                                            <field name="code"/>
                                            <field name="state"/>
                                            <field name="pos_session_id"/>
                                        </group>
                                    </sheet>
                                </form>
                            </field>
                        </group>
                    </sheet>
                </form>
            </field>
        </record>


        <!-- Tree view for az.coupon -->
        <record id="view_az_coupon_tree" model="ir.ui.view">
            <field name="name">az.coupon.tree</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <tree string="Coupons" decoration-success="state == 'valid'">
                    <field name="code"/>
                    <field name="state" widget="badge"
                           decoration-success="state == 'valid'"
                           decoration-warning="state == 'partial'"
                           decoration-danger="state == 'used'"/>
                    <field name="name"/>
                    <field name="page_count"/>
                    <field name="available_count"/>
                    <field name="used_count"/>
                    <field name="pos_order_id"/>
                    <field name="partner_id" invisible="1"/>
                    <field name="partner_code"/>
                    <field name="partner_name"/>
                    <field name="create_date"/>

                </tree>
            </field>
        </record>

        <!-- Search view for az.coupon -->
        <record id="view_az_coupon_search" model="ir.ui.view">
            <field name="name">az.coupon.search</field>
            <field name="model">az.coupon</field>
            <field name="arch" type="xml">
                <search string="Search Coupons">
                    <field name="code"/>
                    <field name="partner_code"/>
                    <field name="partner_name"/>
                    <filter string="Valid" name="valid" domain="[('state', '=', 'valid')]"/>
                    <filter string="Used" name="used" domain="[('state', '=', 'used')]"/>
                    <group expand="0" string="Group By">
                        <filter string="State" name="group_state" context="{'group_by': 'state'}"/>
                    </group>
                </search>
            </field>
        </record>

        <!-- Menu item for Coupons -->
        <menuitem id="menu_az_coupons"
                  name="Coupons"
                  parent="point_of_sale.menu_point_root"
        />

        <!-- Action for az.coupon -->
        <record id="action_az_coupons" model="ir.actions.act_window">
            <field name="name">Coupons</field>
            <field name="res_model">az.coupon</field>
            <field name="view_mode">tree,form</field>
            <field name="view_id" ref="view_az_coupon_tree"/>
        </record>


        <menuitem id="menu_az_coupons_coupons"
                  name="Coupons 🎫"
                  parent="menu_az_coupons"
                  action="action_az_coupons"/>

        <!-- Action for Settings -->
        <record id="action_az_coupons_settings" model="ir.actions.act_window">
            <field name="name">Coupons Settings</field>
            <field name="res_model">res.config.settings</field>
            <field name="view_mode">form</field>
            <field name="target">inline</field>
            <field name="context">{'module': 'az_coupons'}</field>
        </record>

        <!-- Menu item for Settings -->
        <menuitem id="menu_az_coupons_settings"
                  name="Settings⚙️"
                  parent="menu_az_coupons"
                  action="action_az_coupons_settings"/>

    </data>
</odoo>
===== .\views\res_config_settings.xml =====
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="res_config_view_form_inherit_pos_coupon" model="ir.ui.view">
        <field name="name">res.config.form.inherit.pos.coupon</field>
        <field name="model">res.config.settings</field>
        <field name="inherit_id" ref="point_of_sale.res_config_settings_view_form"/>
        <field name="arch" type="xml">
           <xpath expr="//div[hasclass('settings')]" position="inside">
                <div class="app_settings_block" data-string="Coupons Settings" id="coupons" string="Coupons Settings">
                    <h2>Products</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Coupon Page Product</span>
                                <div class="text-muted content-group mt16">
                                    <field name="coupon_page_product"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Coupon Book Products</span>
                                <div class="text-muted content-group mt16">
                                    <field name="coupon_book_product_ids" nolabel="1">
                                        <tree editable="bottom">
                                            <field name="product_id"/>
                                            <field name="page_count"/>
                                        </tree>
                                    </field>
                                </div>
                            </div>
                        </div>
                    </div>
                    <h2>Whatsapp</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">WhatsApp To Number</span>
                                <div class="text-muted content-group mt16">
                                    <field name="whatsapp_to_number" class="text-center oe_inline"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">WhatsApp From Number</span>
                                <div class="text-muted content-group mt16">
                                    <field name="whatsapp_from_number" class="text-center oe_inline"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Twilio Account SID</span>
                                <div class="text-muted content-group mt16">
                                    <field name="twilio_account_sid" class="text-center oe_inline"/>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Twilio Auth Token</span>
                                <div class="text-muted content-group mt16">
                                    <field name="twilio_auth_token" class="text-center oe_inline"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </xpath>
        </field>
    </record>
</odoo>
