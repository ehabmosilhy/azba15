Directory Structure:
├── models
│   ├── product_custody.py
│   ├── stock_picking.py
│   ├── __init__.py
│   └── __pycache__
│       ├── product_custody.cpython-38.pyc
│       ├── stock_picking.cpython-38.pyc
│       └── __init__.cpython-38.pyc
├── out.txt
├── reports
│   ├── custody_report.xml
│   └── custody_report_template.xml
├── security
│   └── ir.model.access.csv
├── views
│   ├── product_custody.xml
│   └── stock_picking.xml
├── wizards
│   ├── custody_report_wizard.py
│   ├── custody_report_wizard.xml
│   ├── __init__.py
│   └── __pycache__
│       ├── custody_report_wizard.cpython-38.pyc
│       └── __init__.cpython-38.pyc
├── __init__.py
├── __manifest__.py
└── __pycache__
    └── __init__.cpython-38.pyc


===== .\out.txt =====

===== .\__init__.py =====
from . import models
from . import wizards
===== .\__manifest__.py =====
# -*- coding: utf-8 -*-
{
    'name': "Product Custody",
    'summary': "Manage custody products",
    'description': "Module to manage custody products.",
    'author': "Ehab",
    'category': 'Inventory',
    'version': '0.1',
    'depends': ['base', 'stock' ],
    'data': [
        'views/product_custody.xml',
        'views/stock_picking.xml',
        'reports/custody_report.xml',
        'reports/custody_report_template.xml',
        'wizards/custody_report_wizard.xml',
        'security/ir.model.access.csv',
    ],
}

===== .\models\product_custody.py =====
# -*- coding: utf-8 -*-

from odoo import fields, models


class CustodyProduct(models.Model):
    _name = 'product.custody'
    _description = 'Custody Products'
    product_id = fields.Many2one('product.product', string="Product", required=True)

===== .\models\stock_picking.py =====
# -*- coding: utf-8 -*-
from odoo import fields, models, api


class StockPicking(models.Model):
    _inherit = 'stock.picking'

    custody_product_exists = fields.Boolean(
        string="صنف عهدة",
        compute='_compute_custody_product_exists'
    )

    @api.onchange('move_ids_without_package')
    def _compute_custody_product_exists(self):
        for record in self:
            custody_products = self.env['product.custody'].search([])
            custody_product_ids = custody_products.mapped('product_id').ids
            record.custody_product_exists = any(
                move.product_id.id in custody_product_ids for move in record.move_ids_without_package
            ) and self.partner_id

===== .\models\__init__.py =====
from . import product_custody
from . import stock_picking
===== .\reports\custody_report.xml =====
<odoo>
    <report
        id="custody_report_pdf_action"
        string="Custody Report"
        model="custody.report.wizard"
        report_type="qweb-pdf"
        name="az_product_custody.custody_report_pdf_template"
        file="az_product_custody.custody_report_pdf_template"
        attachment_use="False"
    />
</odoo>

===== .\reports\custody_report_template.xml =====
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <template id="custody_report_pdf_template">
            <t t-call="web.html_container">
                <t t-foreach="docs" t-as="o">
                    <div class="article" t-att-data-oe-model="o and o._name"
                         t-att-data-oe-id="o and o.id"
                         t-att-data-oe-lang="o and o.env.context.get('lang')">
                        <h2>Custody Report</h2>
                        <p>
                            <strong>Date from:</strong>
                            <t t-esc="o.start_date"/>
                        </p>
                        <p>
                            <strong>Date to:</strong>
                            <t t-esc="o.end_date"/>
                        </p>
                        <p>
                            <strong>Location:</strong>
                            <t t-esc="o.location_id.display_name"/>
                        </p>
                        <t t-if="o.partner_id">
                            <p>
                                <strong>Partner:</strong>
                                <t t-esc="o.partner_id.display_name"/>
                            </p>
                        </t>
                        <table class="table table-condensed">
                            <thead>
                                <tr>
                                    <th>Partner</th>
                                    <th>Product</th>
                                    <th>Sum Out</th>
                                    <th>Sum In</th>
                                    <th>Balance</th>
                                </tr>
                            </thead>
                            <tbody>
                                <t t-foreach="o.recs" t-as="partner, products">
                                    <t t-foreach="products.items()" t-as="product, values">
                                        <tr>
                                            <td>
                                                <t t-esc="partner"/>
                                            </td>
                                            <td>
                                                <t t-esc="product"/>
                                            </td>
                                            <td>
                                                <t t-esc="values['out']"/>
                                            </td>
                                            <td>
                                                <t t-esc="values['in']"/>
                                            </td>
                                            <td>
                                                <t t-esc="values['out'] - values['in']"/>
                                            </td>
                                        </tr>
                                    </t>
                                </t>
                            </tbody>
                        </table>
                    </div>
                </t>
            </t>
        </template>
    </data>
</odoo>

===== .\security\ir.model.access.csv =====
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_product_custody_admin,access.product.custody.admin,model_product_custody,base.group_system,1,1,1,1
access_product_custody_user,access.product.custody.user,model_product_custody,base.group_user,1,1,1,1
access_custody_report_wizard,access.custody.report.wizard,model_custody_report_wizard,base.group_user,1,1,1,1

===== .\views\product_custody.xml =====
<odoo>
    <record id="view_product_custody_tree" model="ir.ui.view">
        <field name="name">product.custody.tree</field>
        <field name="model">product.custody</field>
        <field name="arch" type="xml">
            <tree string="Custody Products">
                <field name="product_id"/>
            </tree>
        </field>
    </record>

    <record id="view_product_custody_form" model="ir.ui.view">
        <field name="name">product.custody.form</field>
        <field name="model">product.custody</field>
        <field name="arch" type="xml">
            <form string="Custody Products">
                <sheet>
                    <group>
                        <field name="product_id"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_product_custody" model="ir.actions.act_window">
        <field name="name">Custody Products</field>
        <field name="res_model">product.custody</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create the first custody product
            </p>
        </field>
    </record>

    <menuitem id="menu_product_custody" name="📥أصناف عهدة"
              parent="stock.menu_product_in_config_stock" action="action_product_custody"
              groups="base.group_system,base.group_user"
    />

</odoo>

===== .\views\stock_picking.xml =====
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>



        <!-- VIEWS -->
        <record id="view_picking_form_inherit_custody" model="ir.ui.view">
            <field name="name">az.stock.picking.form.custody</field>
            <field name="model">stock.picking</field>
            <field name="mode">extension</field>
            <field name="inherit_id" ref="stock.view_picking_form"/>
            <field name="arch" type="xml">
                <xpath expr="//field[@name='origin']" position="after">
                    <field name="custody_product_exists" readonly="1"
                           attrs="{'invisible': [('custody_product_exists', '=', False)]}"/>
                </xpath>
            </field>
        </record>


    </data>
</odoo>
===== .\wizards\custody_report_wizard.py =====
# -*- coding: utf-8 -*-
import base64
from io import BytesIO
from datetime import datetime
from odoo import fields, models, api
import xlsxwriter

class CustodyReportWizard(models.TransientModel):
    _name = 'custody.report.wizard'
    _description = 'Custody Report Wizard'

    start_date = fields.Datetime(string='Start Date', required=True)
    end_date = fields.Datetime(string='End Date', required=True)
    location_id = fields.Many2one('stock.location', string='Location', required=True)
    partner_id = fields.Many2one('res.partner', string='Partner')

    def _prepare_report_data(self):
        custody_product_ids = self.env['product.custody'].search([]).mapped('product_id.id')

        domain = [
            ('location_id', '=', self.location_id.id),
            ('date', '>=', self.start_date),
            ('date', '<=', self.end_date),
            ('product_id', 'in', custody_product_ids),
            ('state', '=', 'done'),
            '|',  # This is a logical OR operator
            ('picking_id.name', 'ilike', '/out/'),
            ('picking_id.name', 'ilike', '/in/')
        ]

        if self.partner_id:
            domain.append(('partner_id', '=', self.partner_id.id))
        else:
            domain.append(('partner_id', '!=', False))

        moves = self.env['stock.move'].search(domain)

        data = {}
        detailed_data = []
        for move in moves:
            partner = f"[{move.partner_id.code}] {move.partner_id.name}" if move.partner_id else ''
            product = f"[{move.product_id.product_tmpl_id.code.strip() if move.product_id.product_tmpl_id.code else ''}] {move.product_id.name}"
            if partner not in data:
                data[partner] = {}
            if product not in data[partner]:
                data[partner][product] = {'out': 0, 'in': 0}
            data[partner][product]['out'] += move.product_uom_qty
            if self.partner_id:
                detailed_data.append({
                    'date': move.date,
                    'picking_name': move.picking_id.name,
                    'partner': partner,
                    'product': product,
                    'quantity_out': move.product_uom_qty,
                    'quantity_in': 0,
                    'type': 'out'
                })

        domain_return = [
            ('location_dest_id', '=', self.location_id.id),
            ('date', '>=', self.start_date),
            ('date', '<=', self.end_date),
            ('product_id', 'in', custody_product_ids),
            ('state', '=', 'done'),
            '|',  # This is a logical OR operator
            ('picking_id.name', 'ilike', '/out/'),
            ('picking_id.name', 'ilike', '/in/')
        ]
        if self.partner_id:
            domain_return.append(('partner_id', '=', self.partner_id.id))
        else:
            domain_return.append(('partner_id', '!=', False))

        moves_return = self.env['stock.move'].search(domain_return)

        for move in moves_return:
            partner = f"[{move.partner_id.code.strip() if move.partner_id.code else ''}] {move.partner_id.name}" if move.partner_id else ''
            product = f"[{move.product_id.product_tmpl_id.code.strip() if move.product_id.product_tmpl_id.code else ''}] {move.product_id.name}"
            if partner not in data:
                data[partner] = {}
            if product not in data[partner]:
                data[partner][product] = {'out': 0, 'in': 0}
            data[partner][product]['in'] += move.product_uom_qty
            if self.partner_id:
                detailed_data.append({
                    'date': move.date,
                    'picking_name': move.picking_id.name,
                    'partner': partner,
                    'product': product,
                    'quantity_out': 0,
                    'quantity_in': move.product_uom_qty,
                    'type': 'in'
                })

        return data, detailed_data

    def generate_report(self):
        data, detailed_data = self._prepare_report_data()

        file_data = BytesIO()
        workbook = xlsxwriter.Workbook(file_data)
        worksheet = workbook.add_worksheet()

        # Write the formatted header
        worksheet.write(0, 0, 'Custody Report')
        worksheet.write(1, 0, f'Date from: {self.start_date}')
        worksheet.write(1, 2, f'Date to: {self.end_date}')
        worksheet.write(2, 0, f'Location: {self.location_id.display_name}')
        if self.partner_id:
            worksheet.write(2, 2, f'Partner: {self.partner_id.display_name}')

        row_start = 4

        if not self.partner_id:
            worksheet.write(row_start, 0, 'Partner')
            worksheet.write(row_start, 1, 'Product')
            worksheet.write(row_start, 2, 'Sum Out')
            worksheet.write(row_start, 3, 'Sum In')
            worksheet.write(row_start, 4, 'Balance')

            row = row_start + 1
            for partner, products in data.items():
                for product, values in products.items():
                    worksheet.write(row, 0, partner)
                    worksheet.write(row, 1, product)
                    worksheet.write(row, 2, values['out'])
                    worksheet.write(row, 3, values['in'])
                    worksheet.write(row, 4, values['out'] - values['in'])
                    row += 1
        else:
            worksheet.write(row_start, 0, 'Date')
            worksheet.write(row_start, 1, 'Picking')
            worksheet.write(row_start, 2, 'Product')
            worksheet.write(row_start, 3, 'Quantity Out')
            worksheet.write(row_start, 4, 'Quantity In')
            worksheet.write(row_start, 5, 'Balance')
            worksheet.write(row_start, 6, 'Type')

            row = row_start + 1
            for record in detailed_data:
                worksheet.write(row, 0, record['date'].strftime('%Y-%m-%d %H:%M:%S'))
                worksheet.write(row, 1, record['picking_name'])
                worksheet.write(row, 2, record['product'])
                worksheet.write(row, 3, record['quantity_out'])
                worksheet.write(row, 4, record['quantity_in'])
                worksheet.write(row, 5, record['quantity_out'] - record['quantity_in'])
                worksheet.write(row, 6, record['type'])
                row += 1

        workbook.close()
        file_data.seek(0)
        file_content = file_data.read()

        attachment = self.env['ir.attachment'].create({
            'name': 'Custody Report.xlsx',
            'type': 'binary',
            'datas': base64.b64encode(file_content),
            'store_fname': 'custody_report.xlsx',
            'res_model': 'custody.report.wizard',
            'res_id': self.id,
        })

        return {
            'type': 'ir.actions.act_url',
            'url': '/web/content/%s?download=true' % attachment.id,
            'target': 'new',
        }

    def generate_pdf_report(self):
        datas, detailed_data = self._prepare_report_data()


        return self.env.ref('az_product_custody.custody_report_pdf_action').report_action(self)

===== .\wizards\custody_report_wizard.xml =====
<odoo>
    <record id="view_custody_report_wizard_form" model="ir.ui.view">
        <field name="name">custody.report.wizard.form</field>
        <field name="model">custody.report.wizard</field>
        <field name="arch" type="xml">
            <form string="Custody Report Wizard">
                <group>
                    <field name="start_date"/>
                    <field name="end_date"/>
                    <field name="location_id"/>
                    <field name="partner_id"/>
                </group>
               <footer>
                    <button string="Generate Excel Report" type="object" name="generate_report" class="btn-primary"/>
                    <button string="Generate PDF Report" type="object" name="generate_pdf_report" class="btn-secondary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="action_custody_report_wizard" model="ir.actions.act_window">
        <field name="name">Custody Report Wizard</field>
        <field name="res_model">custody.report.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <menuitem id="menu_custody_report_wizard" name="تقرير أصناف عهدة📥"
              parent="stock.menu_warehouse_report" action="action_custody_report_wizard"
              groups="base.group_system,base.group_user"    />
</odoo>
===== .\wizards\__init__.py =====
from . import custody_report_wizard
